name: CI
on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          working-directory: backend
          bundler-cache: true
      - name: Scan for common Rails security vulnerabilities using static analysis
        working-directory: backend
        run: bin/brakeman --no-pager

  lint_and_fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # ref を明示的に指定してdetached HEAD を回避
          ref: ${{ github.head_ref || github.ref }}
          
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          working-directory: backend
          bundler-cache: true
          
      # vendor/bundle を確実に .gitignore に追加
      - name: Ensure vendor is ignored
        run: |
          if ! grep -q "vendor/bundle/" backend/.gitignore; then
            echo "vendor/bundle/" >> backend/.gitignore
          fi
          if ! grep -q ".bundle/" backend/.gitignore; then
            echo ".bundle/" >> backend/.gitignore
          fi
          
      - name: Run rubocop with auto-fix
        working-directory: backend
        run: bin/rubocop -A

      - name: Stage only source code changes
        run: |
          # 明示的に追跡したいファイルのみステージング
          git add backend/app/ 2>/dev/null || true
          git add backend/config/ 2>/dev/null || true
          git add backend/test/ 2>/dev/null || true
          git add backend/lib/ 2>/dev/null || true
          git add backend/db/ 2>/dev/null || true
          git add backend/Gemfile 2>/dev/null || true
          git add backend/Gemfile.lock 2>/dev/null || true
          git add backend/.gitignore 2>/dev/null || true
          git add backend/*.rb 2>/dev/null || true

      - name: Check for changes
        id: changes
        run: |
          if git diff --cached --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push auto-fixes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action [rubocop]"
          git commit -m "style: rubocop自動修正 [skip ci]"
          
          # プッシュ先を明示的に指定
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git push origin HEAD:${{ github.head_ref }}
          else
            git push origin HEAD:${{ github.ref_name }}
          fi

      - name: Run rubocop check (final)
        working-directory: backend
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: backend_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          working-directory: backend
          bundler-cache: true
      - name: Run tests
        working-directory: backend
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/backend_test
        run: bin/rails db:create db:test:prepare test
      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore